# Promptfolio .cursorrules

# Full-stack prompt marketplace, creator portfolio builder, and AI-powered digital asset lab

## Project Overview

You are building **Promptfolio** - a prompt-first creator commerce platform with output previews, toolkits, AI artist identity, and creative bundles. This is a production-ready SaaS-grade application targeting prompt engineers, visual artists, AI musicians, lyricists, developers, and marketers.

## Core Prompt Engineering Knowledge Base

### Advanced Prompt Engineering Techniques (Based on Research)

#### Text Generation Mastery

- **Chain-of-Thought Prompting**: Break complex tasks into step-by-step reasoning
- **Few-Shot Learning**: Provide 2-5 examples to establish patterns
- **Tree-of-Thought**: Explore multiple solution paths simultaneously
- **Role-Based Prompting**: Assign specific expertise levels and personas
- **Meta-Prompting**: Create prompts that generate other optimized prompts

#### Multi-Modal Prompt Engineering

- **Image Generation**: Descriptive prompting + negative prompts + style transfer
- **Audio Generation**: Genre specification + mood prompting + technical parameters
- **Video Generation**: Narrative structure + visual continuity + cinematography
- **Code Generation**: Specification-driven + example-based + architecture patterns

#### Advanced Optimization Strategies

- **Progressive Refinement**: Iterative improvement through feedback loops
- **Parameter Optimization**: Fine-tuning temperature, max tokens, and model settings
- **Quality Assessment**: Establishing metrics and evaluation criteria
- **Context Management**: Long-term memory and contextual consistency

#### Cross-Modal Best Practices

- Context preservation across modalities
- Conditional logic integration
- Multi-agent prompting coordination
- Contextual memory management

### Implementation Guidelines for Promptfolio

#### Prompt Components

- Always include research-backed techniques in prompt builders
- Provide technique explanations and examples from knowledge base
- Implement prompt optimization suggestions based on modality
- Create templates using advanced prompting methods

#### Content Generation

- Use knowledge base for accurate, research-backed content
- Implement technique-specific guidance and tooltips
- Create modality-specific prompt builders
- Build quality assessment and optimization tools

## Core Technology Stack

- **Frontend**: React 18+ with TypeScript, Vite
- **Styling**: TailwindCSS + shadcn/ui components
- **Authentication**: Clerk (roles: Viewer, Creator, Admin)
- **Database**: Supabase (PostgreSQL, Storage, Edge Functions)
- **Payments**: Stripe (checkout, payouts, Stripe Connect)
- **Email**: Resend
- **AI Integration**: OpenAI + Ollama/LLaMA (configurable)
- **Icons**: Lucide React
- **Fonts**: Inter or Space Grotesk

## PROMPTFOLIO DESIGN SYSTEM & STYLING RULES

### Core Design Principles

**MANDATORY**: All pages must use consistent dark theme with purple gradients and premium styling.

#### Color Palette

- **Primary**: Purple gradient (`#8b5cf6` to lighter variant)
- **Background**: Dark theme (`hsl(220 27% 8%)`)
- **Foreground**: Light text (`hsl(210 40% 98%)`)
- **Category Colors**:
  - Music: Pink/Magenta (`hsl(338 80% 55%)`)
  - Image: Green (`hsl(142 76% 36%)`)
  - Code: Blue (`hsl(217 92% 60%)`)
  - Text: Orange (`hsl(25 95% 53%)`)

#### Typography & Gradients

**Brand Name**: ALWAYS use gradient text for "Promptfolio"

```tsx
<span className="text-xl font-bold bg-gradient-to-r from-primary via-primary-glow to-primary bg-clip-text text-transparent">
  Promptfolio
</span>
```

**Hero Headings**: Use gradient text for impact

```tsx
className="text-4xl md:text-6xl font-bold bg-gradient-to-r from-primary via-primary-glow to-primary bg-clip-text text-transparent"
```

**Category Headers**: Use category-specific gradients

```tsx
// Music: className="bg-gradient-to-r from-music to-music/80 bg-clip-text text-transparent"
// Image: className="bg-gradient-to-r from-image to-image/80 bg-clip-text text-transparent"
// Code: className="bg-gradient-to-r from-code to-code/80 bg-clip-text text-transparent"
// Text: className="bg-gradient-to-r from-text to-text/80 bg-clip-text text-transparent"
```

#### Layout Standards

**EVERY PAGE MUST FOLLOW THIS STRUCTURE:**

```tsx
<div className="min-h-screen bg-background">
  <Header />
  <main className="py-8">
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      {/* Page content */}
    </div>
  </main>
  <Footer />
</div>
```

**Section Backgrounds:**

- Main sections: `className="py-20 px-4 bg-background"`
- Cards: `className="bg-card/50 backdrop-blur-sm border border-border/50"`

#### Component Styling

**Buttons - Use enhanced variants:**

```tsx
<Button variant="hero" size="xl">        // Primary action
<Button variant="music" size="lg">       // Music category
<Button variant="image" size="lg">       // Image category
<Button variant="code" size="lg">        // Code category
<Button variant="text" size="lg">        // Text category
<Button variant="glass" size="icon">     // Glass effect
```

**Cards with hover effects:**

```tsx
<Card className="group relative overflow-hidden border-border/50 bg-card/50 backdrop-blur-sm transition-all duration-300 hover:scale-105 hover:shadow-elevated hover:border-primary/20 cursor-pointer">
```

**Icons with Gradients:**

```tsx
<div className="w-12 h-12 rounded-xl bg-gradient-music flex items-center justify-center group-hover:scale-110 transition-transform duration-300">
  <IconComponent className="h-6 w-6 text-white" />
</div>
```

#### Animation Standards

**Available Animations:**

- `animate-fade-in` - Fade in effect
- `animate-scale-in` - Scale up entrance
- `animate-float` - Floating movement
- `animate-glow-pulse` - Glowing pulse effect

**Animation Delays:**

```tsx
style={{ animationDelay: `${index * 0.1}s` }}
className="animate-fade-in [animation-delay:0.2s]"
```

#### Header Structure (MANDATORY)

```tsx
<header className="sticky top-0 z-50 w-full border-b border-border/40 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
```

**Logo with Animation:**

```tsx
<Link to="/" className="flex items-center space-x-2 hover:opacity-80 transition-opacity">
  <div className="relative">
    <Sparkles className="h-8 w-8 text-primary animate-glow-pulse" />
    <div className="absolute inset-0 h-8 w-8 bg-primary/20 rounded-full animate-ping" />
  </div>
  <span className="text-xl font-bold bg-gradient-to-r from-primary via-primary-glow to-primary bg-clip-text text-transparent">
    Promptfolio
  </span>
</Link>
```

### IMPLEMENTATION CHECKLIST (REQUIRED)

When creating or updating ANY page:

1. ✅ Use proper page structure with Header/Footer
2. ✅ Apply consistent background classes
3. ✅ Use gradient text for headings and brand elements
4. ✅ Implement hover effects and animations
5. ✅ Apply category-specific theming where relevant
6. ✅ Ensure proper spacing and typography
7. ✅ Test dark theme consistency
8. ✅ Verify gradient effects are working
9. ✅ Check animation performance
10. ✅ Validate responsive behavior

### CRITICAL RULES

- NEVER use plain `bg-white` or light backgrounds
- ALWAYS use HSL color values in CSS variables
- ALWAYS include animation delays for staggered effects
- ALWAYS test that gradients use proper Tailwind classes
- ALWAYS verify all category colors are defined

## Architecture Principles

### 1. Component Structure

- Use shadcn/ui as the foundation
- Create custom components in `/src/components/`
- Follow atomic design: atoms → molecules → organisms → templates
- Prefer composition over inheritance
- Use TypeScript interfaces for all props

### 2. File Naming Conventions

- Components: PascalCase (e.g., `PromptCard.tsx`)
- Hooks: camelCase with 'use' prefix (e.g., `use-prompts.tsx`)
- Pages: PascalCase (e.g., `PromptDetail.tsx`)
- Utilities: camelCase (e.g., `formatPrice.ts`)
- Types: PascalCase with descriptive names (e.g., `PromptData.ts`)

### 3. Hook Naming Convention

- Use hyphenated naming: `use-artists.tsx`, `use-prompts.tsx`, `use-auth.tsx`
- Export both hook and types from same file
- Include loading states, error handling, and optimistic updates

## Page Structure & Routes

### Core Pages (17+ Pages)

1. **Home** (`/`) - Featured prompts, search, categories, artist callouts
2. **Auth** (`/login`, `/signup`) - Clerk authentication with role-based access
3. **Creator Dashboard** (`/dashboard`) - Tabs: Prompts | Sales | Lab | Followers
4. **Prompt Editor** (`/create`) - Modal/page for prompt creation with AI tools
5. **Prompt Detail** (`/prompt/[slug]`) - Full prompt view with previews and purchase
6. **Public Promptfolio** (`/[username]`) - Creator portfolio with bio and prompts
7. **AI Artist Page** (`/artist/[slug]`) - Artist gallery with music/prompts
8. **PromptfolioLab** (`/lab`) - Main lab page with workflows/models/packs
9. **Lab Workflows** (`/lab/workflows`) - ComfyUI workflow marketplace
10. **Lab Models** (`/lab/models`) - AI model downloads with Stripe
11. **Lab Packs** (`/lab/packs`) - Bundled prompt + output + model combos
12. **Lab Music** (`/lab/music`) - Curated artist packs and genres
13. **Lab Install** (`/lab/install`) - ComfyUI setup guides and tutorials
14. **Admin Settings** (`/admin/settings`) - AI config, LLM providers, rate limits
15. **Admin Panel** (`/admin`) - Content moderation, user management
16. **404/Fallback** - Custom error page with navigation
17. **Mobile Navigation** - Responsive hamburger + bottom nav

### Route Connectivity Rules

- ALL prompts must link to related bundles, artists, or lab assets
- Artist pages link to EVERY related prompt and pack
- Prompt detail → output → workflow → install guide
- Lab items link to matching prompts and creators
- No dead ends - every page connects to 3+ other pages

## UI/UX Guidelines

### Visual Identity

- **Aesthetic**: Creative, premium, clean (Notion + Figma + SoundCloud hybrid)
- **Dark Mode First**: Primary dark theme with light mode toggle
- **Mobile-First**: Responsive design with bottom nav and modals
- **Accessibility**: AA color contrast, keyboard navigation, alt text, focus rings

### Component Design Patterns

```tsx
// Prompt Card Structure
interface PromptCardProps {
  prompt: {
    id: string;
    title: string;
    slug: string;
    type: 'text' | 'image' | 'music' | 'code';
    coverImageUrl?: string;
    price: number;
    isPaid: boolean;
    creator: {
      username: string;
      avatarUrl?: string;
    };
    stats: {
      views: number;
      downloads: number;
      likes: number;
    };
    tags: string[];
  };
}
```

### Animation & Interaction

- Use Framer Motion or Tailwind transitions
- Hover effects: lift + glow border (category colored)
- Skeleton loading states
- Smooth page transitions
- Confirmations with subtle animations (no excessive effects)

### Mobile Responsiveness

- Bottom nav: Explore | Upload | Lab | Account
- Modal previews for prompts/workflows
- Sticky CTA bars for purchases
- Swipeable tabs in Lab and Artist pages
- Touch-friendly audio players with scrub bars

## Data Patterns

### Database Schema Considerations

```typescript
// Core entities
interface Prompt {
  id: string;
  slug: string;
  title: string;
  content: string;
  type: 'text' | 'image' | 'music' | 'code';
  coverImageUrl?: string;
  previewUrl?: string;
  price: number;
  isPaid: boolean;
  isFeature: boolean;
  tags: string[];
  creatorId: string;
  artistId?: string; // For music prompts
  stats: PromptStats;
  createdAt: string;
  updatedAt: string;
}

interface Artist {
  id: string;
  slug: string;
  name: string;
  bio?: string;
  avatarUrl?: string;
  coverImageUrl?: string;
  genre: string[];
  verified: boolean;
  socialLinks: Record<string, string>;
  stats: ArtistStats;
}

interface LabAsset {
  id: string;
  type: 'workflow' | 'model' | 'pack';
  title: string;
  description: string;
  fileUrl: string;
  price: number;
  requirements?: string;
  tags: string[];
  creatorId: string;
}
```

### State Management

- Use React Query/TanStack Query for server state
- Zustand for client state (cart, UI preferences)
- Context for theme and auth state
- Optimistic updates for likes, follows, purchases

## AI Integration Guidelines

### LLM Configuration

- Support multiple providers: OpenAI, Ollama, Claude, Custom
- Admin-configurable fallback models
- Rate limiting with user-friendly error messages
- Token limit enforcement
- Temperature and parameter controls

### AI Features to Implement

- Prompt Rewriter (improve existing prompts)
- Output Simulator (generate preview outputs)
- Auto-tagger (genre, style, category detection)
- SEO metadata generation
- Artist bio generation
- Content moderation assistance

### Edge Function Structure

```typescript
// AI calls via Supabase Edge Functions
interface AIRequest {
  prompt: string;
  type: 'rewrite' | 'generate' | 'tag' | 'moderate';
  model?: string;
  temperature?: number;
}

interface AIResponse {
  success: boolean;
  data?: any;
  error?: string;
  usage?: {
    tokens: number;
    cost: number;
  };
}
```

## Monetization Implementation

### Stripe Integration

- Product creation for prompts, packs, workflows, models
- Stripe Connect for creator payouts (10-15% platform fee)
- Checkout sessions with success/cancel URLs
- Webhook handling for payment confirmation
- Pro tier subscriptions (monthly/annual)

### Pro Tier Features

- Analytics dashboard
- Custom domain support
- Private/unlisted prompts
- Verified creator badge
- Email follower export
- Advanced pack creation tools

## Security & Performance

### Authentication & Authorization

- Clerk role-based access (Viewer, Creator, Admin)
- Protected routes with proper redirects
- API key security (never expose in frontend)
- File upload validation and virus scanning

### Performance Optimizations

- Image optimization with Next.js Image or similar
- Lazy loading for prompt grids
- Audio streaming with proper buffering
- Database query optimization
- CDN for static assets

### Error Handling

- Graceful fallbacks for AI service failures
- User-friendly error messages
- Retry mechanisms for network failures
- Comprehensive logging for debugging

## Development Guidelines

### Code Quality

- Use TypeScript strictly (no `any` types)
- ESLint + Prettier configuration
- Pre-commit hooks with Husky
- Component testing with React Testing Library
- E2E testing for critical user flows

### Git Workflow

- Feature branches: `feature/prompt-editor`
- Conventional commits: `feat:`, `fix:`, `docs:`, `style:`
- PR reviews required for main branch
- Automated testing on PR creation

### Environment Configuration

```env
# Required environment variables
VITE_CLERK_PUBLISHABLE_KEY=
CLERK_SECRET_KEY=
VITE_SUPABASE_URL=
VITE_SUPABASE_ANON_KEY=
SUPABASE_SERVICE_ROLE_KEY=
STRIPE_PUBLISHABLE_KEY=
STRIPE_SECRET_KEY=
STRIPE_WEBHOOK_SECRET=
OPENAI_API_KEY=
RESEND_API_KEY=
```

## Content Guidelines

### Prompt Quality Standards

- Clear, actionable prompts
- Proper categorization and tagging
- High-quality preview outputs
- Attribution for AI-generated content
- Content moderation for appropriateness

### Artist/Creator Standards

- Verified identity for monetization
- Quality portfolio requirements
- Community guidelines compliance
- Regular activity requirements for featured status

## Future-Ready Features

### Extensibility

- Plugin SDK for custom prompt enhancements
- API endpoints for external integrations
- Webhook system for third-party notifications
- Export capabilities (PDF, GPT Store, etc.)

### Analytics & Insights

- Creator dashboard with detailed metrics
- A/B testing framework for UI improvements
- User behavior tracking (privacy-compliant)
- Revenue analytics and forecasting

## Promptfolio Design System & Style Guidelines

### Brand Identity & Aesthetic

- **Design Philosophy**: Creative, premium, clean (Notion + Figma + SoundCloud hybrid)
- **Target Feel**: Gallery-quality display for designers, artists, and musicians
- **Visual Hierarchy**: Content-first with clear information architecture
- **Brand Personality**: Professional, innovative, creator-focused, community-driven

### Color System (HSL Format)

```css
/* Dark Mode First - Primary Theme */
--background: 220 27% 8%;           /* Deep charcoal background */
--foreground: 210 40% 98%;          /* Pure white text */
--card: 224 36% 10%;                /* Elevated card background */

/* Creative Purple Primary */
--primary: 262 80% 50%;             /* Vibrant purple #8b5cf6 */
--primary-glow: 262 80% 65%;        /* Lighter purple for effects */

/* Category-Specific Colors */
--music: 338 80% 55%;               /* Pink/Magenta for music prompts */
--image: 142 76% 36%;               /* Green for visual art */
--code: 217 92% 60%;                /* Blue for code/development */
--text: 25 95% 53%;                 /* Orange for text/writing */

/* Semantic Colors */
--secondary: 215 25% 27%;           /* Muted blue-gray */
--muted: 215 25% 20%;               /* Background variations */
--accent: 195 100% 50%;             /* Cyan for highlights */
--destructive: 0 84% 60%;           /* Red for errors/warnings */
```

### Gradient System

```css
/* Premium Gradients for Visual Impact */
--gradient-primary: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--primary-glow)));
--gradient-music: linear-gradient(135deg, hsl(var(--music)), hsl(338 80% 70%));
--gradient-image: linear-gradient(135deg, hsl(var(--image)), hsl(142 76% 50%));
--gradient-code: linear-gradient(135deg, hsl(var(--code)), hsl(217 92% 75%));
--gradient-text: linear-gradient(135deg, hsl(var(--text)), hsl(25 95% 68%));
--gradient-glass: linear-gradient(135deg, hsl(220 27% 12% / 0.8), hsl(220 27% 16% / 0.6));
```

### Typography Scale

```css
/* Font System */
Font Family: Inter or Space Grotesk (system fallback)
Text Sizes:
- xs: 0.75rem    /* Small labels, badges */
- sm: 0.875rem   /* Body text, descriptions */
- base: 1rem     /* Default body text */
- lg: 1.125rem   /* Card titles */
- xl: 1.25rem    /* Section headers */
- 2xl: 1.5rem    /* Page titles */
- 3xl: 1.875rem  /* Hero headings */
- 4xl: 2.25rem   /* Landing page headers */

Font Weights:
- medium: 500    /* Body text */
- semibold: 600  /* Card titles, buttons */
- bold: 700      /* Headers, emphasis */
```

### Spacing & Layout System

```css
/* Consistent Spacing Scale */
Spacing: 0.25rem increments (4px base)
- 1: 0.25rem  (4px)   /* Tight spacing */
- 2: 0.5rem   (8px)   /* Small gaps */
- 3: 0.75rem  (12px)  /* Default spacing */
- 4: 1rem     (16px)  /* Standard spacing */
- 6: 1.5rem   (24px)  /* Section spacing */
- 8: 2rem     (32px)  /* Large spacing */
- 12: 3rem    (48px)  /* Section padding */
- 16: 4rem    (64px)  /* Page padding */

/* Border Radius System */
--radius: 0.75rem (12px) /* Primary radius */
- sm: 0.5rem    (8px)    /* Small elements */
- md: 0.625rem  (10px)   /* Cards, buttons */
- lg: 0.75rem   (12px)   /* Default radius */
- xl: 1rem      (16px)   /* Large cards */
- 2xl: 1.5rem   (24px)   /* Hero elements */
```

### Component Design Patterns

#### Card Components

```tsx
// Standard Card Pattern
<Card className="group relative overflow-hidden rounded-2xl border-border/50 bg-card/50 backdrop-blur-sm transition-all duration-300 hover:scale-105 hover:shadow-elevated hover:border-primary/20 cursor-pointer">
  {/* Content */}
</Card>

// Category-specific Cards with Gradients
<Card className="bg-gradient-to-br from-purple-500/20 via-blue-600/10 to-pink-600/20 border-purple-200/30">
```

#### Button Variants

```tsx
// Primary Action Button
<Button className="bg-gradient-primary text-primary-foreground shadow-glow hover:shadow-elevated hover:scale-105">

// Category Buttons
<Button variant="music" className="bg-gradient-music text-music-foreground shadow-md hover:shadow-lg hover:scale-105">
<Button variant="image" className="bg-gradient-image text-image-foreground shadow-md hover:shadow-lg hover:scale-105">
<Button variant="code" className="bg-gradient-code text-code-foreground shadow-md hover:shadow-lg hover:scale-105">
<Button variant="text" className="bg-gradient-text text-text-foreground shadow-md hover:shadow-lg hover:scale-105">

// Glass Effect Button
<Button variant="glass" className="bg-gradient-glass backdrop-blur-sm border border-white/10 text-foreground hover:bg-white/10">
```

#### Badge System

```tsx
// Category Badges
<Badge variant="music" className="flex items-center gap-1">
  <Music className="h-3 w-3" />
  Music Prompt
</Badge>

// Status Badges
<Badge className="bg-gradient-primary text-primary-foreground animate-glow-pulse">
  <Sparkles className="h-3 w-3 mr-1" />
  Premium
</Badge>

// Featured Badge
<Badge className="absolute top-3 left-3 bg-gradient-to-r from-purple-500 to-pink-500">
  Featured
</Badge>
```

### Animation & Interaction Guidelines

#### Hover Effects

```css
/* Card Hover Pattern */
.card-hover {
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}
.card-hover:hover {
  transform: scale(1.05);
  box-shadow: var(--shadow-elevated);
  border-color: hsl(var(--primary) / 0.2);
}

/* Image Hover in Cards */
.image-hover {
  transition: transform 0.5s cubic-bezier(0.4, 0, 0.2, 1);
}
.image-hover:hover {
  transform: scale(1.1);
}
```

#### Keyframe Animations

```css
/* Fade In Animation */
@keyframes fade-in {
  0% { opacity: 0; transform: translateY(10px); }
  100% { opacity: 1; transform: translateY(0); }
}

/* Scale In Animation */
@keyframes scale-in {
  0% { transform: scale(0.95); opacity: 0; }
  100% { transform: scale(1); opacity: 1; }
}

/* Glow Pulse for Premium Elements */
@keyframes glow-pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.8; }
}

/* Float Animation for Hero Elements */
@keyframes float {
  0%, 100% { transform: translateY(0px); }
  50% { transform: translateY(-10px); }
}
```

### Shadow & Depth System

```css
/* Shadow Hierarchy */
--shadow-glow: 0 0 40px hsl(var(--primary) / 0.3);           /* Glowing primary buttons */
--shadow-card: 0 8px 32px hsl(220 27% 4% / 0.4);             /* Standard card elevation */
--shadow-elevated: 0 16px 64px hsl(220 27% 4% / 0.6);        /* Hover/focus elevation */

/* Glass Morphism Effects */
backdrop-blur-sm   /* Light blur for overlays */
backdrop-blur-md   /* Medium blur for modals */
bg-background/80   /* Semi-transparent backgrounds */
border border-white/10  /* Subtle borders on glass elements */
```

### Layout & Grid Patterns

```tsx
// Standard Grid Layouts
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
  {/* Responsive prompt/card grid */}
</div>

// Hero Section Layout
<section className="py-16 px-4 text-center">
  <div className="container mx-auto max-w-4xl">
    {/* Centered hero content */}
  </div>
</section>

// Dashboard Layout
<div className="container py-12">
  <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
    <div className="lg:col-span-3">{/* Main content */}</div>
    <div className="lg:col-span-1">{/* Sidebar */}</div>
  </div>
</div>
```

### Icon Usage Guidelines

```tsx
// Lucide Icons - Consistent sizing
<Music className="w-4 h-4" />      /* Small icons in text */
<Image className="w-5 h-5" />      /* Medium icons in buttons */
<Code className="w-6 h-6" />       /* Large icons in headers */
<Type className="w-8 h-8" />       /* Hero/feature icons */

// Icon Colors match categories
<Music className="w-4 h-4 text-music" />
<Image className="w-4 h-4 text-image" />
<Code className="w-4 h-4 text-code" />
<Type className="w-4 h-4 text-text" />
```

### Mobile-First Responsive Patterns

```tsx
// Mobile Navigation
<nav className="fixed bottom-0 left-0 right-0 bg-card/95 backdrop-blur-md border-t md:hidden">
  {/* Bottom tab navigation */}
</nav>

// Responsive Grids
<div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 md:gap-6">

// Mobile Modals
<Dialog className="sm:max-w-lg">
  {/* Mobile-friendly modal sizing */}
</Dialog>

// Touch-Friendly Sizing
<Button size="lg" className="h-12 px-6 md:h-10 md:px-4">
  {/* Larger touch targets on mobile */}
</Button>
```

### Content-Specific Styling

#### Prompt Cards

- Aspect ratio: 16:9 for cover images
- Hover effects: Scale (1.05), glow shadow, border highlight
- Category color coding through gradients and badges
- Glass morphism overlays for controls
- Premium badges with glow animation

#### Artist Pages

- Large banner with parallax effects
- Gallery grid with hover zoom
- Dynamic background colors from cover art
- Music player with waveform visualization
- Follower counts and social proof

#### Lab Assets

- Technical specifications display
- GPU requirements badges
- Download progress indicators
- Preview thumbnails with play buttons
- Price display with Stripe integration

### Accessibility Requirements

```css
/* Focus States */
.focus-visible {
  outline: 2px solid hsl(var(--primary));
  outline-offset: 2px;
}

/* Color Contrast */
/* All text must meet WCAG AA standards */
/* Use --foreground for primary text */
/* Use --muted-foreground for secondary text */

/* Motion Preferences */
@media (prefers-reduced-motion: reduce) {
  *, *::before, *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
}
```

### Performance Guidelines

- Use `transform` and `opacity` for animations (GPU-accelerated)
- Implement lazy loading for images and heavy components
- Use skeleton loading states during data fetching
- Optimize images with proper `srcset` attributes
- Minimize layout shifts with aspect ratio containers

## Style Implementation Rules

1. **Consistency First**: Always use defined color variables, never hardcode colors
2. **Category Coherence**: Each prompt type (music/image/code/text) must use its designated color scheme
3. **Animation Harmony**: All transitions use cubic-bezier timing functions for smooth, cohesive motion
4. **Mobile Priority**: Every component must work flawlessly on touch devices
5. **Glass Effects**: Use backdrop-blur sparingly for premium overlay effects
6. **Gradient Usage**: Apply gradients to CTAs, category elements, and premium features
7. **Shadow Hierarchy**: Follow the three-tier shadow system (glow/card/elevated)
8. **Border Radius**: Maintain consistent rounded design language throughout

## Remember

- Every page must be interconnected (no dead ends)
- Mobile-first responsive design with consistent style system
- Accessibility compliance (WCAG AA) with proper focus states
- Production-ready code quality with performance optimization
- Comprehensive error handling with user-friendly messaging
- Security best practices with proper authentication flows
- User experience focus with smooth, delightful interactions
- **STYLE CONSISTENCY**: Always follow the established design system and color palette

This is a commercial SaaS platform - treat it with production-grade standards and attention to visual and interactive detail. Every new component should seamlessly integrate with the existing design language.
